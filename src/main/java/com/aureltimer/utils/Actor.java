package com.aureltimer.utils;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.concurrent.*;

/**
 * ‚úÖ SINGLE ACTOR PATTERN
 * 
 * Thread unique pour toutes les mutations d'√©tat, √©vite les race conditions.
 * Toutes les op√©rations sont s√©rialis√©es dans un seul thread.
 */
public class Actor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Actor.class);
    
    private final String name;
    private final ScheduledExecutorService executor;
    private volatile boolean shutdown = false;
    
    public Actor(String name) {
        this.name = name;
        this.executor = Executors.newSingleThreadScheduledExecutor(r -> {
            Thread thread = new Thread(r, "Actor-" + name);
            thread.setDaemon(true); // Permet √† la JVM de se fermer m√™me si l'actor tourne
            return thread;
        });
        
        LOGGER.debug("üé¨ Actor '{}' cr√©√©", name);
    }
    
    /**
     * Soumet une t√¢che √† ex√©cuter dans l'actor thread
     */
    public <T> CompletableFuture<T> submit(Callable<T> task) {
        if (shutdown) {
            return CompletableFuture.failedFuture(new IllegalStateException("Actor " + name + " is shutdown"));
        }
        
        CompletableFuture<T> future = new CompletableFuture<>();
        
        executor.submit(() -> {
            try {
                T result = task.call();
                future.complete(result);
            } catch (Throwable t) {
                LOGGER.error("‚ùå Erreur dans Actor '{}': {}", name, t.getMessage(), t);
                future.completeExceptionally(t);
            }
        });
        
        return future;
    }
    
    /**
     * Soumet une t√¢che sans retour √† ex√©cuter dans l'actor thread
     */
    public CompletableFuture<Void> submit(Runnable task) {
        return submit(() -> {
            task.run();
            return null;
        });
    }
    
    /**
     * Programme une t√¢che √† ex√©cuter apr√®s un d√©lai
     */
    public ScheduledFuture<?> schedule(Runnable task, long delay, TimeUnit unit) {
        if (shutdown) {
            throw new IllegalStateException("Actor " + name + " is shutdown");
        }
        
        return executor.schedule(() -> {
            try {
                task.run();
            } catch (Throwable t) {
                LOGGER.error("‚ùå Erreur t√¢che programm√©e dans Actor '{}': {}", name, t.getMessage(), t);
            }
        }, delay, unit);
    }
    
    /**
     * Programme une t√¢che √† ex√©cuter apr√®s un d√©lai (Duration)
     */
    public ScheduledFuture<?> schedule(Runnable task, java.time.Duration delay) {
        LOGGER.debug("üïí Actor '{}' programme t√¢che dans {}ms", name, delay.toMillis());
        ScheduledFuture<?> future = schedule(task, delay.toMillis(), TimeUnit.MILLISECONDS);
        LOGGER.debug("‚úÖ T√¢che programm√©e dans Actor '{}' - ScheduledFuture: {}", name, future);
        return future;
    }
    
    /**
     * ‚úÖ SCHEDULE SAFE : Programme une t√¢che p√©riodique avec protection contre les crashes
     * 
     * Si une ex√©cution crash, les suivantes continuent normalement.
     */
    public ScheduledFuture<?> scheduleAtFixedRateSafe(Runnable task, long initialDelay, long period, TimeUnit unit) {
        if (shutdown) {
            throw new IllegalStateException("Actor " + name + " is shutdown");
        }
        
        return executor.scheduleAtFixedRate(() -> {
            try {
                task.run();
            } catch (Throwable t) {
                // ‚úÖ PROTECTION TOTALE : m√™me les Error sont catch√©es
                LOGGER.error("‚ùå Erreur t√¢che p√©riodique dans Actor '{}' (continue quand m√™me): {}", 
                           name, t.getMessage(), t);
                // Le scheduler continue m√™me apr√®s cette erreur
            }
        }, initialDelay, period, unit);
    }
    
    /**
     * ‚úÖ SCHEDULE AT FIXED RATE (Duration)
     */
    public ScheduledFuture<?> scheduleAtFixedRate(Runnable task, java.time.Duration initialDelay, java.time.Duration period) {
        return scheduleAtFixedRateSafe(task, initialDelay.toMillis(), period.toMillis(), TimeUnit.MILLISECONDS);
    }
    
    /**
     * Retourne l'executor pour les cas avanc√©s
     */
    public ScheduledExecutorService executor() {
        return executor;
    }
    
    /**
     * Arr√™t propre de l'actor
     */
    public void shutdown() {
        if (shutdown) return;
        
        shutdown = true;
        LOGGER.info("üõë Arr√™t Actor '{}'", name);
        
        executor.shutdown();
        
        try {
            if (!executor.awaitTermination(5, TimeUnit.SECONDS)) {
                LOGGER.warn("‚ö†Ô∏è Actor '{}' ne s'est pas arr√™t√© proprement, force shutdown", name);
                executor.shutdownNow();
            }
        } catch (InterruptedException e) {
            LOGGER.warn("‚ö†Ô∏è Interruption pendant arr√™t Actor '{}'", name);
            executor.shutdownNow();
            Thread.currentThread().interrupt();
        }
    }
    
    /**
     * V√©rifie si l'actor est arr√™t√©
     */
    public boolean isShutdown() {
        return shutdown || executor.isShutdown();
    }
    
    @Override
    public String toString() {
        return "Actor{name='" + name + "', shutdown=" + shutdown + "}";
    }
}
